# wallpaper-rorate
#!/usr/bin/env bash
# tsouchlarakis@gmail.com 2016.10.05
# Simple script to go through a directory of
# background images as wallpapers in a timely fashion

declare DEFAULT_WPDIR="${HOME}/.wallpapers" DEFAULT_WAIT="60s" BGSETTER USAGE="\nQuick and dirty script to rotate backgrounds\nin wm's with out such options (ie NOT kde, gnome or xfce4)\nUsage: source wallpaper-rotate && rbgHelperAddDir /home/user/pictures && rotateBg &\n(rbgHelperAddDir /home/user/pictures needs to be executed only once per pictures directory.)\nAlternatively you can source this file in your startup scripts and start it from there.\n"

function rbgHelperAssignDefaults {

  if [[ -x $(which feh) ]]; then # Find a setter or die trying
    BGSETTER="feh --bg-scale"
  elif [[ -x $(which wmsetbg) ]]; then
    BGSETTER="wmsetbg"
  elif [[ -x $(which fvwm-root) ]]; then
    BGSETTER="fvwm-root"
  elif [[ -x $(which fbsetbg) ]]; then
    BGSETTER="fbsetbg"
  elif [[ -x $(which bsetbg) ]]; then
    BGSETTER="bsetbg"
  elif [[ -x $(which hsetroot) ]]; then
    BGSETTER="hsetroot -fill"
  elif [[ -x $(which xsetbg) ]]; then
    BGSETTER="xsetbg"
  elif [[ -x $(which xsetroot) ]]; then
    BGSETTER="xsetroot -bitmap"
  else
    echo -e "${USAGE}"
    return 1
  fi

  if [[ -r "${HOME}"/.wallpaper.rotate.rc ]]; then # If there is a readable settings file, read it
    source "${HOME}"/.wallpaper.rotate.rc
  fi

  if [[ ! -d "${DEFAULT_WPDIR}" ]]; then # Just for the first time
    mkdir "${DEFAULT_WPDIR}" 2> /dev/null
  fi
}

# Helper function to populate "~/.wallpapers" directory with links to image files.
#
# First time use of rotateBg, you'll need to run this function first
# with an image file directory as parameter to initialize "~/.wallpapers".
# (create "~/.wallpapers" and populate it)
#
# Call this function with the dir you'd like to add its images as links in "~/.wallpapers"
# for use with "rotateBg" function. eg: "rbgHelperAddDir /home/user/pictures"
function rbgHelperAddDir {
  rbgHelperAssignDefaults # Check between defaults and settings file
  for i in $(ls "${1}"); do
    FE="${i:(-4)}" # Get file extention ${str:(-4)}
    if [[ "${FE,,}" == ".jpg" || "${FE,,}" == ".jpe" || "${FE,,}" == ".png" || "${FE,,}" == ".gif" || "${FE,,}" == ".bmp" ]]; then # and lowercase it ${str,,}
      ln -sf "${1}"/"${i}" "${DEFAULT_WPDIR}"/"${i}"
    fi
  done
}

# Helper function to remove links of images from a given directory in "~/.wallpapers"
#
# Means to remove a directory (previously added with rbgHelperAddDir /home/user/pictures)
# from use with "rotateBg"
#
# Use this function with the unwanted dir as its sole parameter
# eg: "rbgHelperRemoveDir /home/user/pictures"
# It is meant to be called interactively and not from within scripts
function rbgHelperRemoveDir {
  rbgHelperAssignDefaults # Check between defaults and settings file
  for i in $(ls "${1}"); do
    FE="${i:(-4)}" # Get file extention ${str:(-4)}
    if [[ "${FE,,}" == ".jpg" || "${FE,,}" == ".jpe" || "${FE,,}" == ".png" || "${FE,,}" == ".gif" || "${FE,,}" == ".bmp" ]]; then # and lowercase it ${str,,}
      rm -i "${DEFAULT_WPDIR}"/"${i}" # rm --interactive just to play it safe.
    fi
  done
}

function rotateBg {
  rbgHelperAssignDefaults || return 1 # Assign a WP setter, WP symlink dir and a swap delay
  WPD=${DEFAULT_WPDIR} # WallPaperDirecroty
  WPL=( $(ls ${WPD}) ) # fill array with values for WallPaperList
  WPN=${#WPL[*]} # get array upper bound as WallPapersNumber
  while [[ true ]]; do
    #let "RN = $RANDOM % $WPN" # limit a random num to upper array bounds
    RN=$(shuf -n 1 -i 0-"${WPN}") # by using shuf instead of $RANDOM as a RundomNumber
    WP="${WPD}/${WPL[$RN]}" # Get path and name of image as a selected WallPaper
    if [[ -L "${WP}" ]]; then # Check if item is a symlink (accidents do happen)
      ${BGSETTER} "${WP}" # set wallpaper, wait
      sleep ${DEFAULT_WAIT}
    fi
  done
}
