# lib-bash
#!/usr/bin/env bash

function gpush() {
  git add .
  if [[ -n "${1}" ]]; then
    git commit -m "${1}"
  else
    git commit
  fi
  git push
}

function pp() {
  for i in {1..9}; do
    for j in $(seq 1 $i); do
      printf "%d×%d=%d\t" $j $i $((j*i))
    done
    printf "\n"
  done
}

alphanumeric_only() {
  printf "%s\n" "${@//[![:alnum:]]}"
}

function remove_spaces() {
  # https://stackoverflow.com/questions/13659318/how-to-remove-space-from-string
  echo "${@}"|sed 's/ //g'
  #shopt -s extglob # Allow extended globbing
  #var=" lakdjsf   lkadsjf "
  #echo "${var//+([[:space:]])/}"
  #shopt -u extglob
}

function trim() {
  # https://stackoverflow.com/questions/369758/how-to-trim-whitespace-from-a-bash-variable
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

# Chubin works
function cheat_sh() {
  # https://github.com/chubin/cheat.sh
  curl cheat.sh/${1}
}

function rate_sx() {
  # https://twitter.com/igor_chubin
  curl ${1-"usd"}.rate.sx
}

function wttr_in() {
  # https://twitter.com/igor_chubin # Try wttr moon
  curl wttr.in/${1-"Athens"}
}

function accuWeather() {
  # http://www.accuweather.com/
  URL='http://www.accuweather.com/en/gr/athens/182536/weather-forecast/182536'
  wget -q -O- "$URL" | awk -F\' '/acm_RecentLocationsCarousel\.push/{print $2": "$16", "$12"°" }'| head -1
}

function up() {
  DEEP=$1
  for i in $(seq 1 ${DEEP:-"1"}); do
    cd ../
  done
}

function rmDeadLinks() {
  find -L . -name . -o -type d -prune -o -type l -exec rm -i {} +
}

function listenOnPort() {
  # Returns service listening on given port
  if [[ -z "${1}" ]]; then
    printf "port number expected\n"
    return 1
  else
    lsof -n -iTCP:"${1}" |grep LISTEN
  fi
}

function checkDirSizes() {
  # Report first params directory sizes in human readable format
  ls=$(which ls) # Workaround alias
  du=$(which du)
  if [[ -x "${ls}" && -x "${du}" ]]; then
    for d in $( "${ls}" --directory "${1-${HOME}}"/* ); do
      if [[ -d "${d}" ]]; then
        "${du}" -hs "${d}"
      fi
    done
  fi
}

function printMemUsage() {
  #Report Total Used and Available mem in human readable format
  total=$(cat /proc/meminfo |head -1 |awk '{print $2}')
  avail=$(cat /proc/meminfo |head -2 |tail -1 |awk '{print $2}')
  used=$(expr ${total} - ${avail})
  totalMB=$(expr ${total} / 1024)
  availMB=$(expr ${avail} / 1024)
  usedMB=$(expr ${used} / 1024)

  printf "From a total of %dMB, you are using %dMB's, which leaves you with %dMB free memory.\n" ${totalMB} ${usedMB} ${availMB}

}

function rps() {
  # Rock Paper Scissors mt 20170525

  declare -a op=("Rock" "Paper" "Scissors") oc=("WIN" "Defeat" "Draw")

  declare -A rs[0,0]=${oc[2]} rs[0,1]=${oc[1]} rs[0,2]=${oc[0]} rs[1,0]=${oc[0]} rs[1,1]=${oc[2]} rs[1,2]=${oc[1]} rs[2,0]=${oc[1]} rs[2,1]=${oc[0]} rs[2,2]=${oc[2]}

  declare cs=0 us=0 ns=0 rd=0

  printf "Hello! Welcome to %s %s %s Game!\n" ${op[0]} ${op[1]} ${op[2]}

  while [ true ]; do

    read -e -p "${op[0]}:1, ${op[1]}:2, ${op[2]}:3, Quit:0. What's your pick?: " ui

    case ${ui} in
      0)
        if [ $us -gt $cs ] ; then
          bbmsg="${oc[0]}"
        elif [ $us -lt $cs ] ; then
          bbmsg="got ${oc[1]}ed by"
        elif [ $us -eq $cs ] ; then
          bbmsg="${oc[2]}ed with"
        fi

        printf "After %d rounds, you %s the CPU with %d:%d points and %d ties.\n" $rd ${bbmsg} $us $cs $ns

        return 0 ;;

      [1-3])
        let "rd++"
        let "ui--"

        ci=$(shuf -i 0-2 -n 1)

        printf "Round : %d is a %s. You selected %s, while the CPU rolled %s\n" $rd ${rs[${ui},${ci}]}  ${op[${ui}]} ${op[${ci}]}

        case ${rs[${ui},${ci}]} in
          ${oc[0]}) let "us++";;
          ${oc[1]}) let "cs++";;
          ${oc[2]}) let "ns++";;
        esac

        printf "Player : %d, CPU : %d, Ties : %d\n" $us $cs $ns ;;

      *)
        printf "Choose again from 0 to 3\n" ;;

    esac

  done
}

function russianRulette() {
  # https://www.facebook.com/freecodecamp/photos/a.1535523900014339.1073741828.1378350049065059/2006986062868118/?type=3&theater
  # [ $[ $RANDOM % 6 ] == 0 ] && echo "BOOM!!!" || echo "LUCKY GUY!!!"

  let "RV = $RANDOM % 6";

  if [[ $RV == 0 ]]; then
    echo "BOOM!!! You've rolled a ${RV}"
  else
    echo "LUCKY GUY!!! You've rolled a ${RV}"
  fi
}

function servStuff() {
  if [[ -z "${1}" || "${EUID}" -ne "0" ]]; then
    printf "servStuff requires root privilages.\nUsage: sudo servStuff start||stop\n"
    return 1
  else
    declare -a srvcs=( "postgresql-10" "apache2" "vsftpd" "sshd" "rsyncd" "dictd" )
    for srvc in "${srvcs[@]}"; do
      rc-service "${srvc}" "${1}"
    done
  fi
}

function runCmd() {
  DIALOG=${1-"Xdialog"}
  #TMPFILE="/tmp/input.box.txt"
  TMPFILE=/tmp/"${RANDOM}".input.box.txt

  $DIALOG \
    --title "Command Input" \
    --default-button "ok" \
    --inputbox "Enter command to continue" \
    10 40 \
    command 2> $TMPFILE
	#Exit code
  RETVAL=$?
  USRINPUT=$(cat ${TMPFILE})
  $USRINPUT
  return $?
}

function keepParamAlive() {
  #!/usr/bin/env /bin/bash
  # Take an application (first parameter) and respawn it periodicaly (second parameter) if it crashes
  # EG: "keepParamAlive conky 15" Will check every 15sec if conky is running and launch it if it's not
  if [[ -z "${1}" || -z $(which "${1}") ]]; then # Test param
    printf "Need an application as parameter.\n\"%s\" was not found in your PATH.\n" "${1}"
    return 1
  else
    while [[ true ]]; do # Endless loop.
      pid=$(pgrep -x "${1}") # Get a pid.
      if [[ -z "${pid}" ]]; then # If there is none, start it in the background.
        "${1}" &
      else # Else wait.
        sleep ${2-"60"}
      fi
    done
  fi
}

# Pipe fortune or second param through cowsay and lolcat for some color magic
# requires fortune cowsay lolcat
function lol() {
  file=${1-"tux"}
  if [[ -z "${2}" ]]; then
    cmmnd="fortune"
  else
    cmmnd="echo -e ${2}"
  fi
  $cmmnd |cowsay -f $file |lolcat
}

# For use with WindowMaker
# Replace "${APPS}" list with your desired applets.
#function startApps {
#  # Fill a list with the applets you need
#  #APPS="wmfire wmclockmon wmsystray wmMatrix wmbinclock wmbutton wmifinfo wmnd wmmon wmcpuload wmsysmon wmmemload wmacpi wmtime wmcalc wmSpaceWeather wmudmount wmmp3"
#  APPS="wmfire wmMatrix wmclockmon wmsystemtray"
#  for APP in $APPS ; do
#    killall $APP # Just for good mesure.
#    $APP &
#  done
#}

# For use with WindowMaker
# Run this to update your Root menu to reflect themes or apps changes
#function regenMenu {
#  # Backup Root menu
#  cp ~/GNUstep/Defaults/WMRootMenu ~/GNUstep/Defaults/`date +%y%m%d%H%M%S`WMRootMenu
#  # Write new menu
#  wmgenmenu > ~/GNUstep/Defaults/WMRootMenu
#}

# Functions to unify archive management in linux CLI environments
function packArchive() {
  case "${1,,}" in
    *.tar.bz2) tar cjf $@ ;;
    *.tar.gz | *.tgz) tar czf $@ ;;
    *.zip) zip $@ ;;
    *.rar) rar a $@ ;;
    *) printf "Cannot operate on unknown file extention \"%s\"\n" "${1}" ;;
  esac
}

function unpackArchive() {
  case "${1,,}" in # Compare lowercased filename for known extensions.
    *.7z | *.7za) 7z x "${1}" ;;
    *.tar) tar -xf "${1}" ;;
    *.tar.gz | *.tar.z | *.tgz) tar -xzf "${1}" ;;
    *.tar.bz2 | *.tbz2) tar -xjf "${1}" ;;
    *.tar.xz | *.txz) tar -Jxf "${1}" ;;
    *.bz2) bunzip2 "${1}" ;;
    *.rar) rar x "${1}" ;;
    *.gz) gunzip "${1}" ;;
    *.zip | *.jar) unzip "${1}" ;;
    *.z) uncompress "${1}" ;;
    *) printf "Cannot operate on unknown file extention \"%s\"\n" "${1}" ;;
  esac
}

function updateDate() {
  if [ "${EUID}" -ne "0" ]; then
    printf "Need root privilages\n"
    #sudo -l updateDate
    return 1
  else
    ntpdate 0.gentoo.pool.ntp.org
  fi
}

function showUptime() {
  echo -ne "${green}$HOSTNAME ${green}uptime is ${green} \t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10}'
}

function logMeOut() {
  # Call that to logout
  # Can't log out root like that
  if [ "${EUID}" -eq "0" ]; then
    printf "Can not log out root this way\n"
    return 1
  else
    kill -15 -1
  fi
}

function screenShot() {
  # Take a screenshot imagemagic
  # Requires Imagemagic or scrot, ristretto or viewnior
  FN="${HOME}/ss-`date +%y%m%d%H%M%S`.png"
  import -window root $FN||scrot $FN
  ristretto $FN||viewnior $FN
}

function pingSubnet() {
  #for x in {1..254}; do
    for y in {1..254}; do
      (ping -c 1 -w 2 192.168.1.${y} > /dev/null && echo "UP 192.168.1.${y}" &);
    done
  #done
}

function swapWM() {
  sed -i 's/WM=$(which *)/WM=$(which ${1})/g' ${HOME}/.xinitrc
}
